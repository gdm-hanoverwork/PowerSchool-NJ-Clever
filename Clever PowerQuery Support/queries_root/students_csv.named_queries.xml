<queries>
  <query name="com.hanovertwpschools.core.clever.students" coreTable="STUDENTS" flattened="true" tags="">
    <summary>Clever Students Export</summary>
    <description>Student Information</description>
		<columns>
			<column column="students.schoolid">school_id</column>
			<column column="students.dcid">student_id</column>
			<column column="students.student_number">student_number</column>
			<column column="students.state_studentnumber">state_id</column>
			<column column="students.last_name">last_name</column>
			<column column="students.middle_name">middle_name</column>
			<column column="students.first_name">first_name</column>
			<column column="students.grade_level">grade</column>
			<column column="students.gender">gender</column>
			<column column="students.last_name">dob</column>
			<column column="students.ethnicity">Race</column>
			<column column="students.fedethnicity">Hispanic_latino</column>
			<column column="s_nj_stu_x.liep_type">ell_status</column>
			<column column="students.lunchstatus">frl_status</column>
			<column column="s_nj_stu_x.iep_level">iep_status</column>
			<column column="students.street">student_street</column>
			<column column="students.city">student_city</column>
			<column column="students.state">student_state</column>
			<column column="students.zip">student_zip</column>
			<column column="psm_studentcontact.email">student_email</column>
			<column column="codeset.code">contact_relationship</column>
			<column column="codeset.code">contact_type</column>
			<column column="person.lastname">contact_name</column>
			<column column="phonenumber.phonenumber">contact_phone</column>
			<column column="emailaddress.emailaddress">contact_email</column>
			<column column="person.dcid">contact_sis_id</column>
			<column column="psm_studentcontact.email">username</column>
			<column column="students.student_number">password</column>
		</columns>
		<sql>
			<![CDATA[
				WITH student_race AS (
					SELECT
						studentid,
						/* 
						SOME TRANSLATION MAY BE REQUIRED
						**CHECK_ME**
						CASE
						racecd
						WHEN '01' THEN 'I'
						WHEN '02' THEN 'A'
						WHEN '04' THEN 'B'
						WHEN '05' THEN 'W'
						WHEN '06' THEN 'P'
						END racecd AS race 
						*/
						racecd race
					FROM
						studentrace
				),
				studentemail AS (
					SELECT
						ssm.studentsdcid,
						psc.email
					FROM
						psm_studentcontact psc
						INNER JOIN sync_studentmap ssm ON psc.studentid = ssm.studentid
						INNER JOIN psm_studentcontacttype psct ON psc.studentcontacttypeid = psct.id
						AND psct.name = 'Self'
						AND psc.email IS NOT NULL
				),
				phones AS (
					SELECT
						persondcid,
						phonenumber,
						CASE
							phonetype
							WHEN 'Mobile' THEN 'Cell'
							WHEN 'Home' THEN 'Home'
							WHEN 'Work' THEN 'Work'
							WHEN 'Daytime' THEN 'Home'
							ELSE 'Home'
						END phonetype,
						dense_rank() over (
							PARTITION BY persondcid
							ORDER BY
								ispreferred DESC,
								phonenumberpriorityorder
						) AS phnrank
					FROM
						pssis_person_phone
					WHERE
						phonenumberext IS NULL
				),
				con_email AS (
					SELECT
						persondcid,
						pssis_person_email.emailaddress,
						dense_rank() over (
							PARTITION BY persondcid
							ORDER BY
								pssis_person_email.ISPRIMARYEMAILADDRESS DESC, pssis_person_email.EMAILADDRESSPRIORITYORDER
						) AS emrank
					FROM
						pssis_person_email
				),
				contacts AS (
					SELECT
						stucon.studentdcid,
						stucon.currcontactrelationship contact_relationship,
						CASE
							WHEN stucon.iscustodial = 1 THEN 'family'
							/* 
			 				I'm considering "Has Data Access" to be 'family' Your mileage may differ...
			 				
			 				And putting it immediately after iscustodial means it trumps lives-with and emergency...
			 				
			 				**CHECK_ME**
			 				*/
							WHEN guardianstudent.studentsdcid = stucon.studentdcid THEN 'family'
							WHEN stucon.liveswithflg = 1 THEN 'lives-with'
							WHEN stucon.isemergency = 1 THEN 'emergency'
							ELSE 'other'
						END contact_type,
						stucon.contactfirstname || ' ' || stucon.contactlastname contact_name,
						phones.phonenumber contact_phone,
						phones.phonetype contact_phone_type,
						stucon.contactpersondcid,
						COALESCE(
							con_email.emailaddress,
							pcas_emailcontact.emailaddress
						) AS emailaddress
					FROM
						pssis_stu_contact_act stucon
						LEFT JOIN phones ON phones.persondcid = stucon.contactpersondcid
						AND phones.phnrank = 1
						LEFT JOIN guardianpersonassoc ON guardianpersonassoc.personid = stucon.contactpersonid
						LEFT JOIN guardianstudent ON guardianstudent.guardianid = guardianpersonassoc.guardianid
						AND guardianstudent.studentsdcid = stucon.studentdcid
						LEFT JOIN guardian ON guardian.guardianid = guardianstudent.guardianid
						LEFT JOIN pcas_account ON pcas_account.pcas_accounttoken = guardian.accountidentifier
						LEFT JOIN pcas_emailcontact ON pcas_emailcontact.pcas_accountid = pcas_account.pcas_accountid
						LEFT JOIN person ON person.id = stucon.contactpersonid
						LEFT JOIN (
							SELECT
								*
							FROM
								con_email
						) con_email ON person.dcid = con_email.persondcid
						AND COALESCE(con_email.emrank, 0) = 1
						WHERE
						    stucon.contactfirstname IS NOT NULL
						    AND (
						     /* 
						      I only want 'family' contacts going over to Clever
						      **CHECK_ME**
						     */
						     stucon.iscustodial = 1
						     /* 
						      I'm considering 'Has Data Access to student' to be 'family' enough...
						      **CHECK_ME**
						     */
						     OR guardianstudent.studentsdcid = stucon.studentdcid
						    )
						    /* AND guardianstudent.guardianstudentid IS NOT NULL */
						    AND trunc(SYSDATE) BETWEEN COALESCE(
						    	stucon.relationshipstartdate,
						    	trunc(SYSDATE)
						    )
						    AND COALESCE(stucon.relationshipenddate, trunc(SYSDATE))
					ORDER BY
						stucon.contactpriorityorder
				)
				SELECT
					students.enrollment_schoolid school_id,
					students.dcid student_id,
					to_char(students.student_number) student_number,
					students.state_studentnumber state_id,
					students.last_name last_name,
					students.middle_name middle_name,
					students.first_name first_name,
					CASE
						students.grade_level
						WHEN 0 THEN 'Kindergarten'
						WHEN -1 THEN 'Prekindergarten'
						WHEN -2 THEN 'Prekindergarten'
						ELSE to_char(students.grade_level)
					END grade,
					students.gender gender,
					to_char(students.dob, 'MM/DD/YYYY') dob,
					CASE
						/* When we have more than one race code, then we report a MultiRacial Student */
						WHEN (
							SELECT
								COUNT(1)
							FROM
								student_race
							WHERE
								studentid = students.id
						) > 1 THEN 'M'
						ELSE (
							SELECT
								race
							FROM
								student_race
							WHERE
								studentid = students.id
						)
					END Race,
					CASE
						WHEN students.fedethnicity = 1 THEN 'Y'
						ELSE 'N'
					END Hispanic_latino,
					/*
					**CHECK_ME**
					This code below will depend on how your state determines yout ELL_STATUS...
	 				*/
					'' ell_status,
					CASE
						students.lunchstatus
						WHEN 'F' THEN 'F'
						WHEN 'R' THEN 'R'
						ELSE 'N'
					END frl_status,
					CASE
					/*
		 			**CHECK_ME**
		 			This code below will depend on how your state determines yout IEP_STATUS...
		 			*/
						WHEN s_nj_stu_x.iep_begin_date IS NULL
						AND s_nj_stu_x.iep_end_date IS NULL THEN 'N'
						WHEN SYSDATE BETWEEN COALESCE(s_nj_stu_x.iep_begin_date, SYSDATE)
						AND COALESCE(s_nj_stu_x.iep_end_date, SYSDATE) THEN 'Y'
						ELSE 'N'
					END iep_status,
					students.street student_street,
					students.city student_city,
					students.state student_state,
					students.zip student_zip,
					studentemail.email student_email,
					contacts.contact_relationship,
					contacts.contact_type,
					contacts.contact_name contact_name,
					contacts.contact_phone contact_phone,
					contacts.emailaddress contact_email,
					contacts.contactpersondcid contact_sis_id,
	/*
	 **CHECK_ME**
	 This code below will depend on how your student's 'default username' is stored.
	 */
					studentemail.email username,
	/*
	 **CHECK_ME**
	 This code below will depend on how your student's 'default password' is stored / generated.
	 */
					'id' || LPAD(students.student_number, 7, '0') AS password
				FROM
					students
	/*
	 **CHECK_ME**
	 Below Import is State Dependent!
	 */
					LEFT JOIN s_nj_stu_x ON s_nj_stu_x.studentsdcid = students.dcid
					LEFT JOIN (
						SELECT
							*
						FROM
							studentemail
					) studentemail ON studentemail.studentsdcid = students.dcid
					LEFT JOIN (
						SELECT
							*
						FROM
							contacts
					) contacts ON contacts.studentdcid = students.dcid
					AND contacts.contact_name != ' '
				WHERE
					students.schoolid BETWEEN 0
					AND 100
					AND students.enrollment_schoolid BETWEEN 0
					AND 100
					AND (
						students.enroll_status = 0
						OR (
							students.enroll_status = -1
							AND students.entrydate <= TRUNC(SYSDATE) + 14
						)
					)
				ORDER BY
					students.dcid,
					contacts.contactpersondcid
			]]>
		</sql>
	</query>
</queries>
